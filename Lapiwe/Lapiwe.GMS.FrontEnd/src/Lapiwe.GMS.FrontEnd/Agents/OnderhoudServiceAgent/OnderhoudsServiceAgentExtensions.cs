// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Lapiwe.GMS.FrontEnd.Agents
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for OnderhoudsServiceAgent.
    /// </summary>
    public static partial class OnderhoudsServiceAgentExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            public static void MaakNieuwOnderhoudsOpdracht(this IOnderhoudsServiceAgent operations, MeldOnderhoudsOpdrachtAanCommand command = default(MeldOnderhoudsOpdrachtAanCommand))
            {
                Task.Factory.StartNew(s => ((IOnderhoudsServiceAgent)s).MaakNieuwOnderhoudsOpdrachtAsync(command), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task MaakNieuwOnderhoudsOpdrachtAsync(this IOnderhoudsServiceAgent operations, MeldOnderhoudsOpdrachtAanCommand command = default(MeldOnderhoudsOpdrachtAanCommand), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.MaakNieuwOnderhoudsOpdrachtWithHttpMessagesAsync(command, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            public static void StartNieuwOnderhoudsOpdracht(this IOnderhoudsServiceAgent operations, StartOnderhoudOpdrachtCommand command = default(StartOnderhoudOpdrachtCommand))
            {
                Task.Factory.StartNew(s => ((IOnderhoudsServiceAgent)s).StartNieuwOnderhoudsOpdrachtAsync(command), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartNieuwOnderhoudsOpdrachtAsync(this IOnderhoudsServiceAgent operations, StartOnderhoudOpdrachtCommand command = default(StartOnderhoudOpdrachtCommand), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.StartNieuwOnderhoudsOpdrachtWithHttpMessagesAsync(command, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
